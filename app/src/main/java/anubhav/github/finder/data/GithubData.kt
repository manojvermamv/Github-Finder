package anubhav.github.finder.data

import com.google.gson.annotations.SerializedName
import io.objectbox.annotation.Entity
import io.objectbox.annotation.Id

data class GithubData<T>(
    @SerializedName("incomplete_results") var incompleteResults : Boolean   = false,
    @SerializedName("items"             ) var items             : List<T>?  = null,
    @SerializedName("total_count"       ) var totalCount        : Int?      = null
)

@Entity
data class Profile(
    @Id(assignable = true)
    @SerializedName("id"                  ) var id                : Long?    = null,
    @SerializedName("avatar_url"          ) var avatarUrl         : String?  = null,
    @SerializedName("events_url"          ) var eventsUrl         : String?  = null,
    @SerializedName("followers_url"       ) var followersUrl      : String?  = null,
    @SerializedName("following_url"       ) var followingUrl      : String?  = null,
    @SerializedName("gists_url"           ) var gistsUrl          : String?  = null,
    @SerializedName("gravatar_id"         ) var gravatarId        : String?  = null,
    @SerializedName("html_url"            ) var htmlUrl           : String?  = null,
    @SerializedName("login"               ) var login             : String?  = null,
    @SerializedName("node_id"             ) var nodeId            : String?  = null,
    @SerializedName("organizations_url"   ) var organizationsUrl  : String?  = null,
    @SerializedName("received_events_url" ) var receivedEventsUrl : String?  = null,
    @SerializedName("repos_url"           ) var reposUrl          : String?  = null,
    @SerializedName("score"               ) var score             : Int?     = null,
    @SerializedName("site_admin"          ) var siteAdmin         : Boolean? = null,
    @SerializedName("starred_url"         ) var starredUrl        : String?  = null,
    @SerializedName("subscriptions_url"   ) var subscriptionsUrl  : String?  = null,
    @SerializedName("type"                ) var type              : String?  = null,
    @SerializedName("url"                 ) var url               : String?  = null
)

@Entity
data class FullProfile(
    @Id(assignable = true)
    @SerializedName("id"                  ) var id                : Long?    = null,
    @SerializedName("login"               ) var login             : String?  = null,
    @SerializedName("node_id"             ) var nodeId            : String?  = null,
    @SerializedName("avatar_url"          ) var avatarUrl         : String?  = null,
    @SerializedName("gravatar_id"         ) var gravatarId        : String?  = null,
    @SerializedName("url"                 ) var url               : String?  = null,
    @SerializedName("html_url"            ) var htmlUrl           : String?  = null,
    @SerializedName("followers_url"       ) var followersUrl      : String?  = null,
    @SerializedName("following_url"       ) var followingUrl      : String?  = null,
    @SerializedName("gists_url"           ) var gistsUrl          : String?  = null,
    @SerializedName("starred_url"         ) var starredUrl        : String?  = null,
    @SerializedName("subscriptions_url"   ) var subscriptionsUrl  : String?  = null,
    @SerializedName("organizations_url"   ) var organizationsUrl  : String?  = null,
    @SerializedName("repos_url"           ) var reposUrl          : String?  = null,
    @SerializedName("events_url"          ) var eventsUrl         : String?  = null,
    @SerializedName("received_events_url" ) var receivedEventsUrl : String?  = null,
    @SerializedName("type"                ) var type              : String?  = null,
    @SerializedName("site_admin"          ) var siteAdmin         : Boolean? = null,
    @SerializedName("name"                ) var name              : String?  = null,
    @SerializedName("company"             ) var company           : String?  = null,
    @SerializedName("blog"                ) var blog              : String?  = null,
    @SerializedName("location"            ) var location          : String?  = null,
    @SerializedName("email"               ) var email             : String?  = null,
    @SerializedName("hireable"            ) var hireable          : String?  = null,
    @SerializedName("bio"                 ) var bio               : String?  = null,
    @SerializedName("twitter_username"    ) var twitterUsername   : String?  = null,
    @SerializedName("public_repos"        ) var publicRepos       : Int?     = null,
    @SerializedName("public_gists"        ) var publicGists       : Int?     = null,
    @SerializedName("followers"           ) var followers         : Int?     = null,
    @SerializedName("following"           ) var following         : Int?     = null,
    @SerializedName("created_at"          ) var createdAt         : String?  = null,
    @SerializedName("updated_at"          ) var updatedAt         : String?  = null
)


data class Repo(
    val allow_forking: Boolean,
    val archive_url: String,
    val archived: Boolean,
    val assignees_url: String,
    val blobs_url: String,
    val branches_url: String,
    val clone_url: String,
    val collaborators_url: String,
    val comments_url: String,
    val commits_url: String,
    val compare_url: String,
    val contents_url: String,
    val contributors_url: String,
    val created_at: String,
    val default_branch: String,
    val deployments_url: String,
    val description: String,
    val disabled: Boolean,
    val downloads_url: String,
    val events_url: String,
    val fork: Boolean,
    val forks: Int,
    val forks_count: Int,
    val forks_url: String,
    val full_name: String,
    val git_commits_url: String,
    val git_refs_url: String,
    val git_tags_url: String,
    val git_url: String,
    val has_discussions: Boolean,
    val has_downloads: Boolean,
    val has_issues: Boolean,
    val has_pages: Boolean,
    val has_projects: Boolean,
    val has_wiki: Boolean,
    val homepage: String,
    val hooks_url: String,
    val html_url: String,
    val id: Int,
    val is_template: Boolean,
    val issue_comment_url: String,
    val issue_events_url: String,
    val issues_url: String,
    val keys_url: String,
    val labels_url: String,
    val language: String,
    val languages_url: String,
    val merges_url: String,
    val milestones_url: String,
    val mirror_url: Any,
    val name: String,
    val node_id: String,
    val notifications_url: String,
    val open_issues: Int,
    val open_issues_count: Int,
    val `private`: Boolean,
    val pulls_url: String,
    val pushed_at: String,
    val releases_url: String,
    val score: Double,
    val size: Int,
    val ssh_url: String,
    val stargazers_count: Int,
    val stargazers_url: String,
    val statuses_url: String,
    val subscribers_url: String,
    val subscription_url: String,
    val svn_url: String,
    val tags_url: String,
    val teams_url: String,
    val topics: List<String>,
    val trees_url: String,
    val updated_at: String,
    val url: String,
    val visibility: String,
    val watchers: Int,
    val watchers_count: Int,
    val web_commit_signoff_required: Boolean
)